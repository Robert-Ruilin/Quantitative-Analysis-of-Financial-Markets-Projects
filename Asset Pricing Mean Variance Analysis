"""
-Meanâ€“Variance Analysis-

Industry_Portfolios.xlsx contains monthly nominal (net) returns for ten industry portfolios, expressed as a percentage. 
These returns cover the ten-year period from Jan 2004 through Dec 2013.

Calculate the vector of mean returns and covariance matrix of returns for the ten industry portfolios. 
Create a table showing the mean returns and standard deviation of returns for the ten industry portfolios. 
Also plot the minimum-variance frontier generated by the ten industry portfolios, 
with mean return on the vertical axis and standard deviation of return on the horizontal axis. 
The plot should cover the range from 0% to 2% per month on the vertical axis. 
Briefly explain the economic significance of this minimum-variance frontier.

Now suppose that the risk-free rate is 0.13% per month. 
Plot the efficient frontier (with the riskless asset) on the same plot as the minimum-variance frontier 
generated by the ten industry portfolios. 
Briefly explain the economic significance of this efficient frontier.

The two frontiers will intersect at single point: the tangency portfolio. 
Calculate the weights of the ten industry portfolios at the tangency portfolio. 
Briefly explain the economic significance of this tangency portfolio.
"""


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def Mean_Variance_Frontier(r):
    
    R_industry, STD_industry, V_industry = r.mean(), r.std(), r.cov()
    print(R_industry)
    print(STD_industry)
    print(V_industry)
    R_portfolio = np.linspace(0,2,201)
    R, V, e = np.array(R_industry).T, np.array(V_industry), np.ones(len(r.columns))
    V_inv  = np.linalg.inv(V)
    alpha = np.dot(np.dot(R.T,V_inv),e)
    zeta = np.dot(np.dot(R.T,V_inv),R)
    delta = np.dot(np.dot(e.T,V_inv),e)
    
    #efficient frontier without riskless asset
    Sigma_portfolio1 = np.sqrt((delta*R_portfolio**2-2*alpha*R_portfolio+zeta)/(zeta*delta-alpha**2))
    
    #efficient frontier with risklesss asset
    Rf = 0.13
    Sigma_portfolio2 = np.sqrt((R_portfolio-Rf)**2/(zeta-2*alpha*Rf+delta*Rf**2))
    R_portfolio2 = R_portfolio[R_portfolio>Rf]
    Sigma_portfolio2 = Sigma_portfolio2[R_portfolio>Rf]
    
    #tangency portfolio variance
    R_tangency = (alpha*Rf-zeta)/(delta*Rf-alpha)
    Sigma_tangency = -(np.sqrt(zeta-2*alpha*Rf+delta*Rf**2))/(delta*(Rf-alpha/delta))
    
    #calculate weight for each industry at tangency point
    a = (zeta*np.dot(V_inv,e)-alpha*np.dot(V_inv,R))/(zeta*delta-alpha**2)
    b = (delta*np.dot(V_inv,R)-alpha*np.dot(V_inv,e))/(zeta*delta-alpha**2)
    w = a + b*R_tangency
    print(w)
    
    return R_portfolio, R_portfolio2, Sigma_portfolio1, Sigma_portfolio2, R_tangency, Sigma_tangency

r = pd.read_excel('Industry_Portfolios.xlsx',header=0,index_col=0)
R_p, R_p2, Sigma_p_nrl, Sigma_p_rl, R_t, Sigma_t = Mean_Variance_Frontier(r)
    
fig,ax = plt.subplots()
plt.xlim(0,5)
plt.plot(Sigma_p_nrl, R_p, c = 'b', label = 'Mean Variance Frontier without riskless asset')
plt.plot(Sigma_p_rl, R_p2, c = 'r', label = 'Mean Variance Frontier with riskless asset')
plt.plot(Sigma_t, R_t, 'go', label = 'tangency portfolio')
plt.legend()
plt.show()
